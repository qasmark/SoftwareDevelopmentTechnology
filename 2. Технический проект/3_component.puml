@startuml Components
!include <C4/C4_Component>

System_Boundary(c1, "Система Геолокации") {

  Container(api_gateway, "API Gateway", "Nginx", "Балансировка, маршрутизация, аутентификация (JWT, OAuth 2.0)") {
    Component(load_balancer, "Load Balancer", "Nginx", "Распределение нагрузки между микросервисами")
    Component(auth_module, "Authentication Module", "Lua (Nginx)", "Проверка JWT и OAuth 2.0 токенов; интеграция с сервисом аутентификации")
    Component(rate_limiter, "Rate Limiter", "Nginx", "Ограничение количества запросов, защита от DoS атак")
    Component(request_logger, "Request Logger", "Nginx", "Логирование запросов для мониторинга и анализа")
  }

  System_Boundary(microservices, "Микросервисы") {
    Container(geo_service, "Гео сервис", "Go", "Обработка геоданных, бизнес-логика") {
        Component(location_receiver, "Приемник геоданных", "Go", "Получает данные от устройств через Kafka")
        Component(location_processor, "Обработчик геоданных", "Go", "Валидация, обработка и сохранение геоданных")
        Component(geofence_engine, "Движок геозон", "Go", "Определение пересечения геозон")
        Component(geocoder, "Геокодер", "Go", "Преобразование адресов в координаты и обратно (интеграция с OpenStreetMap)")
    }
    Container(auth_service, "Сервис аутентификации", "Go", "Аутентификация (JWT, OAuth 2.0)") {
        Component(jwt_manager, "JWT Manager", "Go", "Генерация и валидация JWT")
        Component(oauth_manager, "OAuth Manager", "Go", "Интеграция с OAuth 2.0 провайдерами")
    }
    Container(user_service, "Сервис пользователей", "Go", "Управление пользователями") {
        Component(user_manager, "User Manager", "Go", "CRUD операции с пользователями")
        Component(profile_manager, "Profile Manager", "Go", "Управление профилями пользователей")
    }
    Container(device_service, "Сервис устройств", "Go", "Управление устройствами") {
        Component(device_manager, "Device Manager", "Go", "CRUD операции с устройствами")
        Component(device_status_tracker, "Device Status Tracker", "Go", "Отслеживание статуса устройств (онлайн/оффлайн)")      
    }
    Container(geofence_service, "Сервис геозон", "Go", "Управление геозонами") {
       Component(geofence_manager, "Geofence Manager", "Go", "CRUD операции с геозонами")
    }
    Container(notification_service, "Сервис уведомлений", "Go", "Отправка уведомлений (push, email)") {
       Component(push_sender, "Push Sender", "Go", "Отправка push-уведомлений")
       Component(email_sender, "Email Sender", "Go", "Отправка email уведомлений")
    }
    Container(analytics_service, "Сервис аналитики", "Go", "Аналитика и отчеты") {
        Component(report_generator, "Report Generator", "Go", "Генерация отчетов")
        Component(data_analyzer, "Data Analyzer", "Go", "Анализ геоданных")
    }

    Rel(geo_service, geofence_service, "Работа с геозонами", "gRPC")
    Rel(geo_service, notification_service, "Отправка уведомлений", "gRPC")
    Rel(geo_service, device_service, "Информация об устройствах", "gRPC")
    Rel(geo_service, user_service, "Информация о пользователях", "gRPC")
    Rel(auth_service, user_service, "Работа с пользователями", "gRPC")
    Rel(analytics_service, geo_service, "Получение геоданных", "gRPC")

  }

    Container(mobile_app, "Мобильное приложение", "Flutter", "Flutter, Dart")

    Rel(mobile_app, api_gateway, "Запросы, геоданные, аутентификация", "HTTP/2, WebSockets, OAuth 2.0")
    Rel(api_gateway, microservices, "Маршрутизация запросов", "HTTP/2")

  ContainerDb(cockroachdb, "CockroachDB", "CockroachDB", "Хранение геоданных, геозон")
  ContainerDb(timescaledb, "TimescaleDB", "TimescaleDB", "Хранение истории перемещений")
  ContainerDb(redis, "Redis", "Redis", "Кэширование данных")
  ContainerQueue(kafka, "Kafka", "Apache Kafka", "Обработка данных в реальном времени")
  Container(vault, "Vault", "HashiCorp Vault", "Хранение конфиденциальных данных")

}

Rel(microservices, cockroachdb, "Хранение геоданных, геозон", "JDBC")
Rel(microservices, timescaledb, "Хранение истории перемещений", "JDBC")
Rel(microservices, redis, "Кэширование данных", "")
Rel(geo_service, kafka, "Получение геоданных от устройств", "Kafka Consumer")
Rel(microservices, vault, "Получение секретов", "")

System_Ext(openstreetmap, "OpenStreetMap", "Картографический сервис")
Rel(geo_service, openstreetmap, "Получение картографических данных", "API")

System_Ext(oauth_providers, "OAuth провайдеры (Google, Facebook, etc.)", "Аутентификация")
Rel(auth_service, oauth_providers, "Аутентификация через OAuth 2.0", "OAuth 2.0")
Rel(mobile_app, oauth_providers, "Аутентификация", "OAuth 2.0")

System_Ext(gitlab_ci, "GitLab CI/CD", "CI/CD")
Rel(gitlab_ci, microservices, "Deployment, управление конфигурациями", "")

System_Ext(monitoring_tools, "Prometheus, Grafana, ELK", "Мониторинг")
Rel(microservices, monitoring_tools,"Отправка метрик и логов", "")
Rel(api_gateway, monitoring_tools, "Отправка метрик и логов", "")

System_Ext(testing_tools, "testify, GoMock, Cypress, k6", "Тестирование")
Rel(testing_tools, microservices, "Тестирование API, интеграционные и E2E тесты", "")

@enduml