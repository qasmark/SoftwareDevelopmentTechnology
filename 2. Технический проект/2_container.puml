@startuml
!include <c4/C4_Container>

together {
  Person(device_owner, "Владелец устройства", "Мониторинг местоположения, просмотр истории")
  Person(operator, "Оператор системы", "Управление данными, отчеты, доступ")
  Person(business_user, "Бизнес-пользователь", "Анализ геоданных, интеграция")
  Person(third_party, "Третьи стороны", "Получение геоданных через API")
}

System_Boundary(c1, "Система Геолокации (в кластере Kubernetes)") {
  ' Уровень фронтенда
  Container(mobile_app, "Мобильное приложение", "Flutter", "Сбор геоданных, карта, история, уведомления", $sprite="react")
  Container(web_app, "Веб-приложение", "Flutter Web", "Управление устройствами, аналитика, геозоны, пользователи", $sprite="react")

  ' Уровень сервисов
  Container(api_gateway, "API Gateway", "Nginx", "Балансировка, маршрутизация, аутентификация (JWT, OAuth 2.0)", $sprite="nginx")
  Container(geo_service, "Сервис Геолокации", "Go", "Обработка геоданных, бизнес-логика, геозоны, уведомления", $sprite="go")
  Container(auth_service, "Сервис Аутентификации", "Go", "Аутентификация (JWT, OAuth 2.0)", $sprite="go")
  Container(user_service, "Сервис Пользователей", "Go", "Управление пользователями", $sprite="go")
  Container(device_service, "Сервис Устройств", "Go", "Управление устройствами", $sprite="go")
  Container(geofence_service, "Сервис Геозон", "Go", "Управление геозонами", $sprite="go")
  Container(notification_service, "Сервис Уведомлений", "Go", "Отправка уведомлений (push, email)", $sprite="go")
  Container(analytics_service, "Сервис Аналитики", "Go", "Аналитика и отчеты", $sprite="go")

  ' Шина событий Kafka (один инстанс в контексте Kubernetes)
  ContainerDb(kafka, "Kafka", "Apache Kafka", "Шина событий", $sprite="kafka")

  ' Уровень БД, кэша
  ContainerDb(geo_service_db, "Geo Service DB", "CockroachDB", "Хранение геоданных, геозон", $sprite="cockroachdb")
  ContainerDb(geo_service_timescale, "Geo Service Timescale", "TimescaleDB", "Хранение истории перемещений", $sprite="timescaledb")
  ContainerDb(auth_service_db, "Auth Service DB", "CockroachDB", "Хранение данных пользователей", $sprite="cockroachdb")
  ContainerDb(user_service_db, "User Service DB", "CockroachDB", "Хранение данных пользователей", $sprite="cockroachdb")
  ContainerDb(device_service_db, "Device Service DB", "CockroachDB", "Хранение данных устройств", $sprite="cockroachdb")
  ContainerDb(geofence_service_db, "Geofence Service DB", "CockroachDB", "Хранение данных геозон", $sprite="cockroachdb")
  ContainerDb(analytics_service_db, "Analytics Service DB", "CockroachDB", "Хранение данных для аналитики", $sprite="cockroachdb")
  ContainerDb(redis, "Redis", "Redis", "Кэширование данных (местоположение, геозоны)", $sprite="redis")

  ' Внешние системы в контексте Kubernetes
  Container(vault, "Vault", "HashiCorp Vault", "Хранение секретов (токены, API ключи)", $sprite="vault")
  Container(monitoring, "Мониторинг", "Prometheus + Grafana + ELK", "Сбор метрик, логов, оповещения")

  Rel(device_owner, mobile_app, "Взаимодействие", "HTTP/2, WebSockets")
  Rel(operator, web_app, "Взаимодействие", "HTTP/2")
  Rel(business_user, web_app, "Взаимодействие", "HTTP/2")
  Rel(third_party, api_gateway, "Взаимодействие", "HTTP/2")

  Rel(mobile_app, api_gateway, "Запросы, отправка геоданных, аутентификация", "HTTP/2, WebSockets, OAuth 2.0")
  Rel(web_app, api_gateway, "Запросы, управление, аутентификация", "HTTP/2, OAuth 2.0")
  Rel(api_gateway, geo_service, "Маршрутизация запросов", "HTTP/2")
  Rel(api_gateway, auth_service, "Аутентификация", "HTTP/2")
  Rel(api_gateway, user_service, "Запросы к user_service", "HTTP/2")
  Rel(api_gateway, device_service, "Запросы к device_service", "HTTP/2")
  Rel(api_gateway, geofence_service, "Запросы к geofence_service", "HTTP/2")
  Rel(api_gateway, notification_service, "Запросы к notification_service", "HTTP/2")
  Rel(api_gateway, analytics_service, "Запросы к analytics_service", "HTTP/2")

  Rel(geo_service, geo_service_db, "Запись/чтение данных", "SQL")
  Rel(geo_service, geo_service_timescale, "Запись/чтение истории", "SQL")
  Rel(geo_service, redis, "Запись/чтение кэша", "Redis protocol")
  Rel(geo_service, kafka, "Отправка/получение событий", "Kafka protocol")
  Rel(geo_service, vault, "Получение секретов", "Vault API")

  Rel(auth_service, auth_service_db, "Чтение/запись данных", "SQL")
  Rel(auth_service, vault, "Получение секретов", "Vault API")

  Rel(user_service, user_service_db, "Чтение/запись данных", "SQL")
  Rel(user_service, vault, "Получение секретов", "Vault API")

  Rel(device_service, device_service_db, "Чтение/запись данных", "SQL")
  Rel(device_service, vault, "Получение секретов", "Vault API")

  Rel(geofence_service, geofence_service_db, "Чтение/запись данных", "SQL")
  Rel(geofence_service, vault, "Получение секретов", "Vault API")

  Rel(notification_service, vault, "Получение секретов", "Vault API")

  Rel(analytics_service, analytics_service_db, "Чтение данных", "SQL")
  Rel(analytics_service, vault, "Получение секретов", "Vault API")

  Rel(mobile_app, kafka, "Отправка геоданных в реальном времени", "Kafka protocol")

  Rel(geo_service, monitoring, "Отправка метрик и логов", "")
  Rel(api_gateway, monitoring, "Отправка метрик и логов", "")
  Rel(web_app, monitoring, "Отправка метрик и логов", "")
  Rel(auth_service, monitoring, "Отправка метрик и логов", "")
  Rel(user_service, monitoring, "Отправка метрик и логов", "")
  Rel(device_service, monitoring, "Отправка метрик и логов", "")
  Rel(geofence_service, monitoring, "Отправка метрик и логов", "")
  Rel(notification_service, monitoring, "Отправка метрик и логов", "")
  Rel(analytics_service, monitoring, "Отправка метрик и логов", "")

  ' Связи между сервисами через Kafka
    together {
      Rel(geo_service, kafka, "Публикация событий", "Kafka Producer")
      Rel(auth_service, kafka, "Публикация событий", "Kafka Producer")
      Rel(user_service, kafka, "Публикация событий", "Kafka Producer")
      Rel(device_service, kafka, "Публикация событий", "Kafka Producer")
      Rel(geofence_service, kafka, "Публикация событий", "Kafka Producer")
      Rel(notification_service, kafka, "Публикация событий", "Kafka Producer")
      Rel(analytics_service, kafka, "Публикация событий", "Kafka Producer")
      Rel(geo_service, kafka, "Подписка на события", "Kafka Consumer")
      Rel(auth_service, kafka, "Подписка на события", "Kafka Consumer")
      Rel(user_service, kafka, "Подписка на события", "Kafka Consumer")
      Rel(device_service, kafka, "Подписка на события", "Kafka Consumer")
      Rel(geofence_service, kafka, "Подписка на события", "Kafka Consumer")
      Rel(notification_service, kafka, "Подписка на события", "Kafka Consumer")
      Rel(analytics_service, kafka, "Подписка на события", "Kafka Consumer")
    }
}

System_Boundary(external_systems, "Внешние системы", " ") {
  System_Ext(openstreetmap, "OpenStreetMap", "Предоставление картографических данных", "HTTP/2")
  System_Ext(google_maps, "Google Maps Platform", "Альтернативный картографический сервис (через адаптер)", "HTTP/2")
  System_Ext(mapbox, "Mapbox", "Альтернативный картографический сервис (через адаптер)", "HTTP/2")
  System_Ext(auth_provider, "OAuth Provider (Google, Facebook)", "Аутентификация пользователей", "OAuth 2.0")
}

Rel(geo_service, openstreetmap, "Запрос карт", "HTTP/2")
Rel(geo_service, google_maps, "Запрос картографических данных (опционально)", "HTTP/2")
Rel(geo_service, mapbox, "Запрос картографических данных (опционально)", "HTTP/2")
Rel(mobile_app, auth_provider, "Аутентификация", "OAuth 2.0")
Rel(web_app, auth_provider, "Аутентификация", "OAuth 2.0")

@enduml